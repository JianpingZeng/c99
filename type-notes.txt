
- sizeof()/alignment calculated lazily on demand. When instantiating, accessing, 
  etc.

- breaks at pointer

- When to calculate:
    -- arrays (except parameters)
    -- non-extern variables
    -- sizeof()
    -- lvalue access (read/write)
    -- in struct scope

- When not to calculate:
    -- extern
    -- after a pointer
    -- parameter arrays (that should happen automatically)
    -- typedef

- example case for lazy calculation

    extern struct S s;
    int v1 = sizeof(s); // error
    struct S * p = &s; // good
    struct S { int a, b; };
    int v2 = sizeof(s); // good

- however array must always be sized (except as parameters). This doesn't
  work

    extern struct S a[10]; // error!
